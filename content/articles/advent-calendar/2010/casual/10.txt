Data::Validatorでバリデーションする
meta-author: hisaichi5518
meta-tags: perl, validator
meta-date: 2010-12-10

はじめまして！<a href="http://twitter.com.hisaichi5518">@hisaichi5518</a>です。就活生です。誰か雇ってください。
Text::Xatenaについて書こうと思っていたんですが、もう<a href="/articles/advent-calendar/2010/meta_adcal/5">Text::Xatenaの記事</a>が他のトラックにあるので、今日はgfxさんによってリリースされた<a href="https://github.com/gfx/p5-Data-Validator">Data::Validator</a>を紹介しようと思います。

**Data::Validator とは
実行時型チェック / パラメーターチェックが出来る便利なモジュールです。
現在、Params::Validateがデファクトスタンダードっぽいんですが、速度が遅かったりするので正直微妙です。

**ベンチマーク
<a href="https://github.com/gfx/p5-Data-Validator/blob/master/benchmark/simple.pl">p5-Data-Validator/benchmark/simple.pl</a>
>||
Params::Validate/0.95
Smart::Args/0.06
Data::Validator/0.06
without type constraints
                   Rate   P::Validate P::Validate/off       S::Args D::Validator
P::Validate     20968/s            --             -1%          -44%         -67%
P::Validate/off 21144/s            1%              --          -43%         -67%
S::Args         37179/s           77%             76%            --         -42%
D::Validator    63999/s          205%            203%           72%           --
||<
Data::Validatorが抜群に早いですね。素晴らしい。これは試してみないと！！！！
というわけで試しましょう。

**Data::Validatorのインストール
>||
    cpanm Data::Validator
||<
CPANにも上がってるので簡単ですね！

**Data::Validatorの使い方
>|perl|
    use Data::Validator;
    my $v = Data::Validator->new(
        hoge => { isa => "Num" },
    );
    my $args = $v->validate(hoge => 123);
||<
これまた簡単！
isaだけなら、「 hoge => "Num" 」でも大丈夫です。
例えば、以下のようにすると「Invalid value for 'hoge': Validation failed for 'Num' with value str」と怒られます。

>|perl|
    my $args = $v->validate(hoge => "str");
||<

isaは、Mouseのtype constraint名か任意のtype constraintオブジェクトを渡す事が出来ます。
<a href="http://search.cpan.org/dist/Mouse/lib/Mouse/Util/TypeConstraints.pm#Default_Type_Constraints">Mouse::Util::TypeConstraintsのDefault Type Constraints</a>とかですね。
URIかどうか確かめたい！という時はこうします。
>|perl|
use Data::Validator;
use MouseX::Types::URI;

my $v    = Data::Validator->new( uri => { isa => 'URI' } );
my $args = $v->validate(uri => 'http://example.com/');
||<
あらまあ、簡単。
>||
use Mouse::Util::TypeConstraints;
use Data::Validator;

my $MyHash = subtype 'MyHash', as 'HashRef';
coerce $MyHash,
    from 'ArrayRef', via { +{ @{$_} } };

my $v = Data::Validator->new(
    foo => $MyHash,
);
$v->validate({ foo => { a => 42 } }); #=> { foo => { a => 42 } }
$v->validate({ foo => [ a => 42 ] }); #=> { foo => { a => 42 } }
||<
なんて事も出来ます。これは、<a href="https://github.com/gfx/p5-Data-Validator/blob/master/t/006_moose_coerce.t">テストからコピペした</a>んですけども。

Data::Validatorをもっと詳しく知りたい場合は<a href="http://search.cpan.org/dist/Data-Validator/lib/Data/Validator.pm">POD</a>とか<a href="https://github.com/gfx/p5-Data-Validator/tree/master/t">/t以下</a>を見ればいいと思います。

**まとめ
Data::Validatorかんたん、はやい、べんり！
これだけべた褒めしておいてなんですが、このモジュールはリリースされたばかりです。
みんなでたくさん使って、さらにいいものにしていきましょう！

「OSSは使って育てるもの。」by <a href="http://twitter.com/#!/__gfx__/status/9988955441209346">@__gfx__</a>

次は、<a href="http://twitter.com/bayashi">bayashi</a>さんです！

**関連リンク
<a href="http://d.hatena.ne.jp/gfx/20101111/1289481327">Idea of Data::Validator</a>
コンセプトとかが書かれています。
<a href="http://d.hatena.ne.jp/gfx/20101112/1289548718">Data::Validatorの凝った使い方</a>
ここでは説明してないメソッドwith()について書かれています。
<a href="https://github.com/gfx/p5-Data-Validator">Data::Validator</a>
github
<a href="http://search.cpan.org/dist/Data-Validator/">Data::Validator</a>
CPAN